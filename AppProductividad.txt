Fase 1: üèóÔ∏è Cimientos, Estructura y Personalizaci√≥n Visual
En esta fase inicial, nos enfocaremos en crear el esqueleto de la aplicaci√≥n, la navegaci√≥n principal y el sistema de personalizaci√≥n visual. Esto es crucial porque todas las dem√°s funcionalidades depender√°n de esta base.

Estructura de Archivos:

index.html: Contendr√° la estructura principal, incluyendo el contenedor para el men√∫ lateral (sidebar) y el √°rea de contenido principal. Se agregar√° un <div id="background-container"></div> para el fondo personalizable.

style.css: Incluir√° todos los estilos, con variables CSS (--primary-color, --secondary-color, etc.) para los colores y una clase para el fondo personalizado.

script.js: Contendr√° la l√≥gica principal, incluyendo el enrutamiento y la manipulaci√≥n del DOM. Se agregar√°n funciones para guardar y cargar las preferencias del usuario.

Men√∫ de Navegaci√≥n Lateral (Sidebar):

Debe ser funcional, mostrando las secciones: Horarios, Notas acad√©micas, Estudio de ingl√©s, Dibujo, Ejercicio f√≠sico, Lista de tareas, Bit√°cora de alimentaci√≥n y Ajustes.

Totalmente Responsivo: En escritorio, debe ser visible. En dispositivos m√≥viles, debe colapsar en un men√∫ de hamburguesa que se despliega al tocarlo. Al ocultarse, el contenido principal debe ajustarse correctamente.

M√≥dulo de Ajustes ‚öôÔ∏è:

Implementa la l√≥gica de personalizaci√≥n visual.

Selector de Tema: Un interruptor para cambiar entre Modo Claro y Modo Oscuro.

Paleta de Colores:

Color Primario (Fondo): Dos opciones: Blanco y Negro.

Color Secundario (Acento): Ocho opciones predefinidas: Azul claro, Morado, Rosado, Rojo, Verde, Amarillo, Negro y Blanco. Estos colores se aplicar√°n a botones, √≠conos, bordes y elementos activos.

Fondo de Pantalla Personalizable:

Se agregar√° una opci√≥n para que el usuario pueda subir una imagen. Esta imagen se establecer√° como fondo en todo el <body> de la aplicaci√≥n, con un estilo de background-size: cover y background-attachment: fixed para un efecto visual agradable.

El sistema debe validar que la imagen sea un archivo v√°lido (JPG, PNG).

Persistencia de Ajustes: Las preferencias de tema, color y el fondo de pantalla deben guardarse en localStorage y cargarse cada vez que se abre la aplicaci√≥n.

Estructura de Plantillas (Modularidad):

Crea una funci√≥n en script.js que cargue el contenido de una secci√≥n en el √°rea principal al hacer clic en una opci√≥n del men√∫.

Prepara archivos HTML o plantillas de JS para cada secci√≥n (ej. ejercicio.html, notas.html). Inicialmente, pueden contener solo un t√≠tulo para verificar que la navegaci√≥n funciona.

Fase 2: üí™ M√≥dulo de Ejercicio F√≠sico (Funcionalidad Principal)
Esta es la secci√≥n m√°s compleja y servir√° como prueba de concepto para la interacci√≥n de datos y la interfaz de usuario din√°mica. La vista de "Control de Sesi√≥n" y "Rutina Actual" deben estar en la misma pantalla para una experiencia fluida.

Gesti√≥n de Rutinas:

Crea la interfaz para que los usuarios puedan crear, editar y eliminar plantillas de rutinas.

Cada plantilla debe permitir agregar ejercicios clasificados por grupo muscular.

Campos por ejercicio: Nombre, series, repeticiones, peso y notas.

Validaciones: Se debe validar que los campos de series y repeticiones sean n√∫meros positivos.

Interactividad: Implementa animaciones suaves al a√±adir o eliminar ejercicios.

Vista de Sesi√≥n Activa:

Temporizador Principal: Un cron√≥metro grande y visible en la parte superior (HH:MM:SS) con una tipograf√≠a atractiva.

Botones de Control:

Iniciar Entrenamiento: Inicia el temporizador principal. Cambia a Pausar.

Terminar Sesi√≥n: Detiene el temporizador. Muestra una ventana de confirmaci√≥n con un estilo atractivo y, al aceptar, guarda la sesi√≥n completa en la bit√°cora.

Reiniciar: Resetea el temporizador y el progreso de la rutina actual.

Visualizaci√≥n de la Rutina:

Los grupos musculares deben ser bloques colapsables con √≠conos representativos.

Cada ejercicio mostrar√° sus series con un checkbox y un campo para ingresar el peso real de la serie.

Permitir editar/eliminar series individualmente.

Bot√≥n + A√±adir Serie para agregar series din√°micamente.

Bot√≥n Terminar Serie: Al hacer clic, marca todos los checkboxes de ese ejercicio e inicia un temporizador de descanso visible (ej. 3 min), con un bot√≥n para "Saltar Descanso".

Bit√°cora Autom√°tica üìñ:

Al "Terminar Sesi√≥n", se debe crear una nueva entrada en la bit√°cora.

La entrada registrar√°: Fecha, duraci√≥n total, nombre de la rutina, y un desglose de los ejercicios realizados (reps, peso, tiempo de descanso por serie).

La bit√°cora debe ser una lista de entradas, cada una con opci√≥n de editar o eliminar (con confirmaci√≥n).

Fase 3: üéì M√≥dulo de Notas Acad√©micas y Tareas (Organizaci√≥n Detallada)
Esta fase se centra en herramientas de organizaci√≥n acad√©mica con c√°lculos autom√°ticos y categorizaci√≥n.

Estructura General:

Al entrar en "Notas acad√©micas", el usuario debe poder crear y nombrar materias. Cada materia ser√° una secci√≥n independiente, con un dise√±o de tarjeta personalizable.

Dentro de cada materia, habr√° dos pesta√±as: Tareas y Calificaciones.

Pesta√±a de Calificaciones:

Dentro de una materia, el usuario debe definir el valor porcentual (%) de tres categor√≠as: Notas Diarias, Apreciaci√≥n y Examen Final. Se validar√° que la suma de los porcentajes sea 100%.

Permitir agregar notas individuales. Al agregar una nota, el usuario le pone un t√≠tulo (ej. "Parcial 1") y la asigna a una de las tres categor√≠as. Se validar√° que el valor de la nota est√© entre 0 y 100.

El sistema debe calcular y mostrar en tiempo real el promedio de cada categor√≠a y el promedio final de la materia basado en los porcentajes.

Pesta√±a de Tareas:

Funcionalidad de To-Do list.

Al a√±adir una tarea, debe incluir: T√≠tulo, Descripci√≥n, y Fecha de Entrega (con un selector de fecha f√°cil de usar).

Las tareas se mostrar√°n como tarjetas con un indicador de color seg√∫n la proximidad de la fecha de entrega:

Rojo: Faltan 3 d√≠as o menos (o est√° vencida).

Amarillo: Faltan 7 d√≠as o menos.

Verde: Faltan m√°s de 7 d√≠as.

Permitir marcar tareas como completadas, editarlas y eliminarlas con animaciones de transici√≥n.

Fase 4: üé® M√≥dulos Creativos y de Estudio + Nuevo M√≥dulo de Bit√°cora de Alimentaci√≥n
Esta fase se enfoca en las secciones que manejan contenido multimedia y de texto de forma estructurada.

Bit√°cora de Dibujo üé®:

Formulario para a√±adir una nueva entrada con: Descripci√≥n (√°rea de texto), Fecha y Hora, y un campo para adjuntar una imagen.

Las entradas se visualizar√°n como tarjetas visuales, con una animaci√≥n de zoom al pasar el rat√≥n.

Validaci√≥n: Se validar√° que el archivo subido sea una imagen.

Ajuste de Dise√±o: Las tarjetas deben ser m√°s delgadas y compactas que en el dise√±o de referencia para optimizar el espacio vertical.

Estudio de Ingl√©s üìñ:

Implementa una interfaz con tres pesta√±as: Vocabulario, Gram√°tica y Recursos.

Vocabulario: Formulario para a√±adir palabras o frases, incluyendo campos para la traducci√≥n y frases de ejemplo.

Gram√°tica: Un √°rea para registrar reglas gramaticales con t√≠tulos y descripciones.

Recursos de Apoyo: Funcionalidad para subir y visualizar archivos (PDF, Word, Excel, PPT, JPG, PNG, JPEG). Utiliza un carrusel din√°mico o una galer√≠a para mostrar los recursos subidos.

Creador de Horarios Personalizado ‚è∞:

La tabla del horario debe ser totalmente personalizable, con la posibilidad de arrastrar y soltar celdas.

Permitir al usuario escribir directamente en las celdas.

Funcionalidades de Edici√≥n:

Borrar columnas (d√≠as).

Editar el intervalo de tiempo de una fila espec√≠fica.

Definir el rango horario visible (hora de inicio y fin).

Guardado de Horarios: El usuario debe poder guardar m√∫ltiples horarios personalizados (ej. "Horario Semestre 1", "Horario Vacaciones"). Estos horarios deben persistir en localStorage.

Bit√°cora de Alimentaci√≥n ü•ó (NUEVO):

Interfaz amigable con un dise√±o de calendario y tarjetas para cada entrada.

Formulario para una nueva entrada:

Fecha: Un selector de fecha intuitivo.

Nota: Un √°rea de texto para la descripci√≥n de la comida.

Imagen: Un campo para adjuntar una o varias fotos de la comida. Se validar√° que sea un archivo de imagen.

Visualizaci√≥n y Filtrado:

Las entradas se mostrar√°n en un formato de bit√°cora, con la fecha y la imagen o im√°genes de la comida.

Se implementar√°n filtros por fecha (ej. "Hoy", "√öltimos 7 d√≠as") y por palabra clave en la nota.

Se podr√° editar y eliminar cada entrada con un bot√≥n visible al pasar el rat√≥n por la tarjeta.

Interactividad: Implementa un efecto de galer√≠a al hacer clic en las im√°genes para verlas en grande.

Fase 5: ‚ú® Integraci√≥n Final, Persistencia y Pulido
Esta √∫ltima fase une todas las funcionalidades y prepara la aplicaci√≥n para su despliegue final. El proyecto debe ser optimizado para funcionar como un WebView en Android Studio, lo que significa que la navegaci√≥n y el rendimiento deben ser fluidos, y se evitar√°n dependencias externas pesadas.

Calendario de Progreso Global üìÖ:

Implementa una vista de calendario.

Los d√≠as en los que se haya completado una actividad (un entrenamiento, una tarea, un estudio de ingl√©s, etc.) deben mostrar un punto verde.

Al hacer clic en un d√≠a con un punto, debe aparecer una vista (modal o desplegable) que liste las actividades realizadas ese d√≠a (ej. "Ejercicio: Rutina de Pecho", "Tarea completada: Ensayo de Historia").

Buscador Global üîç:

A√±ade una barra de b√∫squeda en la cabecera que permita encontrar cualquier nota, tarea, ejercicio, o recurso por palabra clave en toda la aplicaci√≥n.

Se implementar√° un sistema de b√∫squeda reactiva, mostrando los resultados en tiempo real a medida que el usuario escribe.

Persistencia de Datos Avanzada (Exportar/Importar con .zip) üìÇ:

Guardado Local: Toda la informaci√≥n generada en la aplicaci√≥n (rutinas, notas, tareas, dibujos, etc.) debe persistir autom√°ticamente en el localStorage del navegador.

Funci√≥n de Exportaci√≥n: Se debe implementar un bot√≥n de "Exportar Datos". Al presionarlo, la aplicaci√≥n deber√°:

Recopilar toda la informaci√≥n del localStorage.

Convertir estos datos en un √∫nico archivo de texto con formato JSON.

Empaquetar este archivo JSON dentro de un archivo .zip.

Iniciar la descarga de este archivo .zip en el dispositivo del usuario. (Esto asegura que en el futuro se puedan incluir otros archivos, como las im√°genes de la secci√≥n de dibujo, dentro del mismo paquete).

Funci√≥n de Importaci√≥n: Se debe implementar un bot√≥n de "Importar Datos" que permita al usuario seleccionar un archivo .zip desde su dispositivo. Al cargarlo, la aplicaci√≥n deber√°:

Descomprimir el archivo y leer el JSON contenido en √©l.

Presentar al usuario dos opciones claras: "Sobrescribir" (borrar todos los datos actuales y reemplazarlos con los del archivo) o "Fusionar" (a√±adir los datos importados a los existentes, idealmente evitando duplicados).