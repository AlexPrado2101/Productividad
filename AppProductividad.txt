Fase 1: üèóÔ∏è Cimientos, Estructura y Personalizaci√≥n Visual
En esta fase inicial, nos enfocaremos en crear el esqueleto de la aplicaci√≥n, la navegaci√≥n principal y el sistema de personalizaci√≥n visual. Esto es crucial porque todas las dem√°s funcionalidades depender√°n de esta base.
1.	Estructura de Archivos:
o	index.html: Contendr√° la estructura principal, incluyendo el contenedor para el men√∫ lateral (sidebar) y el √°rea de contenido principal.
o	style.css: Incluir√° todos los estilos. Define aqu√≠ las variables CSS para los colores primarios y secundarios, que ser√°n manipuladas con JavaScript.
o	script.js: Contendr√° la l√≥gica principal de la aplicaci√≥n, como el enrutamiento y la manipulaci√≥n del DOM.
2.	Men√∫ de Navegaci√≥n Lateral (Sidebar):
o	Debe ser funcional, mostrando las secciones: Horarios, Notas acad√©micas, Estudio de ingl√©s, Dibujo, Ejercicio f√≠sico, Lista de tareas y Ajustes.
o	Totalmente Responsivo: En escritorio, debe ser visible. En dispositivos m√≥viles, debe colapsar en un men√∫ de hamburguesa que se despliega al tocarlo.
o	Al ocultarse, el contenido principal debe ajustarse correctamente, sin quedar elementos pegados al borde.
3.	M√≥dulo de Ajustes ‚öôÔ∏è:
o	Implementa la l√≥gica de personalizaci√≥n visual.
o	Selector de Tema: Un interruptor para cambiar entre Modo Claro y Modo Oscuro.
o	Paleta de Colores:
ÔÇß	Color Primario (Fondo): Dos opciones: Blanco y Negro.
ÔÇß	Color Secundario (Acento): Ocho opciones predefinidas: Azul claro, Morado, Rosado, Rojo, Verde, Amarillo, Negro y Blanco. Estos colores se aplicar√°n a botones, √≠conos, bordes y elementos activos.
o	Persistencia de Ajustes: Las preferencias de tema y color del usuario deben guardarse en localStorage y cargarse cada vez que se abre la aplicaci√≥n.
4.	Estructura de Plantillas (Modularidad):
o	Crea una funci√≥n en script.js que cargue el contenido de una secci√≥n en el √°rea principal al hacer clic en una opci√≥n del men√∫.
o	Prepara archivos HTML o plantillas de JS para cada secci√≥n (ej. ejercicio.html, notas.html). Inicialmente, pueden contener solo un t√≠tulo para verificar que la navegaci√≥n funciona.
________________________________________
Fase 2: üí™ M√≥dulo de Ejercicio F√≠sico (Funcionalidad Principal)
Esta es la secci√≥n m√°s compleja y servir√° como prueba de concepto para la interacci√≥n de datos y la interfaz de usuario din√°mica. La vista de "Control de Sesi√≥n" y "Rutina Actual" deben estar en la misma pantalla para una experiencia fluida.
1.	Gesti√≥n de Rutinas:
o	Crea la interfaz para que los usuarios puedan crear, editar y eliminar plantillas de rutinas.
o	Cada plantilla debe permitir agregar ejercicios clasificados por grupo muscular.
o	Campos por ejercicio: Nombre, series, repeticiones, peso y notas.
2.	Vista de Sesi√≥n Activa:
o	Temporizador Principal: Un cron√≥metro grande y visible en la parte superior (HH:MM:SS).
o	Botones de Control:
ÔÇß	Iniciar Entrenamiento: Inicia el temporizador principal. Cambia a Pausar.
ÔÇß	Terminar Sesi√≥n: Detiene el temporizador. Muestra una ventana de confirmaci√≥n y, al aceptar, guarda la sesi√≥n completa en la bit√°cora.
ÔÇß	Reiniciar: Resetea el temporizador y el progreso de la rutina actual.
o	Visualizaci√≥n de la Rutina:
ÔÇß	Los grupos musculares deben ser bloques colapsables.
ÔÇß	Cada ejercicio mostrar√° sus series con un checkbox.
ÔÇß	Permitir editar/eliminar series individualmente.
ÔÇß	Bot√≥n + A√±adir Serie para agregar series din√°micamente.
ÔÇß	Bot√≥n Terminar Serie: Al hacer clic, marca todos los checkboxes de ese ejercicio e inicia un temporizador de descanso visible (ej. 3 min), con un bot√≥n para "Saltar Descanso".
3.	Bit√°cora Autom√°tica üìñ:
o	Al "Terminar Sesi√≥n", se debe crear una nueva entrada en la bit√°cora.
o	La entrada registrar√°: Fecha, duraci√≥n total, nombre de la rutina, y un desglose de los ejercicios realizados (reps, peso, tiempo de descanso por serie).
o	La bit√°cora debe ser una lista de entradas, cada una con opci√≥n de editar o eliminar (con confirmaci√≥n).
________________________________________
Fase 3: üéì M√≥dulo de Notas Acad√©micas y Tareas (Organizaci√≥n Detallada)
Esta fase se centra en herramientas de organizaci√≥n acad√©mica con c√°lculos autom√°ticos y categorizaci√≥n.
1.	Estructura General:
o	Al entrar en "Notas acad√©micas", el usuario debe poder crear y nombrar materias. Cada materia ser√° una secci√≥n independiente.
o	Dentro de cada materia, habr√° dos pesta√±as: Tareas y Calificaciones.
2.	Pesta√±a de Calificaciones:
o	Dentro de una materia, el usuario debe definir el valor porcentual (%) de tres categor√≠as: Notas Diarias, Apreciaci√≥n y Examen Final.
o	Permitir agregar notas individuales. Al agregar una nota, el usuario le pone un t√≠tulo (ej. "Parcial 1") y la asigna a una de las tres categor√≠as.
o	El sistema debe calcular y mostrar en tiempo real el promedio de cada categor√≠a y el promedio final de la materia basado en los porcentajes.
3.	Pesta√±a de Tareas:
o	Funcionalidad de To-Do list.
o	Al a√±adir una tarea, debe incluir: T√≠tulo, Descripci√≥n, y Fecha de Entrega. La Fecha de Creaci√≥n se asigna autom√°ticamente.
o	Las tareas se mostrar√°n como tarjetas con un indicador de color seg√∫n la proximidad de la fecha de entrega:
ÔÇß	Rojo: Faltan 3 d√≠as o menos (o est√° vencida).
ÔÇß	Amarillo: Faltan 7 d√≠as o menos.
ÔÇß	Verde: Faltan m√°s de 7 d√≠as.
o	Permitir marcar tareas como completadas, editarlas y eliminarlas.
________________________________________
Fase 4: üé® M√≥dulos Creativos y de Estudio
Esta fase se enfoca en las secciones que manejan contenido multimedia y de texto de forma estructurada.
1.	Bit√°cora de Dibujo üé®:
o	Formulario para a√±adir una nueva entrada con: Descripci√≥n (√°rea de texto), Fecha y Hora, y un campo para adjuntar una imagen.
o	Las entradas se visualizar√°n como tarjetas visuales.
o	Ajuste de Dise√±o: Las tarjetas deben ser m√°s delgadas y compactas que en el dise√±o de referencia para optimizar el espacio vertical.
2.	Estudio de Ingl√©s üìñ:
o	Implementa una interfaz con tres pesta√±as: Vocabulario, Gram√°tica y Recursos.
o	Vocabulario: Formulario para a√±adir palabras o frases, incluyendo campos para la traducci√≥n y frases de ejemplo.
o	Gram√°tica: Un √°rea para registrar reglas gramaticales con t√≠tulos y descripciones.
o	Recursos de Apoyo: Funcionalidad para subir y visualizar archivos (PDF, Word, Excel, PPT, JPG, PNG, JPEG). Utiliza un carrusel din√°mico o una galer√≠a para mostrar los recursos subidos.
3.	Creador de Horarios Personalizado ‚è∞:
o	La tabla del horario debe ser totalmente personalizable.
o	Permitir al usuario escribir directamente en las celdas.
o	Funcionalidades de Edici√≥n:
ÔÇß	Borrar columnas (d√≠as).
ÔÇß	Editar el intervalo de tiempo de una fila espec√≠fica.
ÔÇß	Definir el rango horario visible (hora de inicio y fin).
o	Guardado de Horarios: El usuario debe poder guardar m√∫ltiples horarios personalizados (ej. "Horario Semestre 1", "Horario Vacaciones"). Estos horarios deben persistir en localStorage.
________________________________________
Fase 5: ‚ú® Integraci√≥n Final, Persistencia y Pulido
Esta √∫ltima fase une todas las funcionalidades y prepara la aplicaci√≥n para su despliegue final.
1.	Calendario de Progreso Global üìÖ:
o	Implementa una vista de calendario.
o	Los d√≠as en los que se haya completado una actividad (un entrenamiento, una tarea, un estudio de ingl√©s, etc.) deben mostrar un punto verde.
o	Al hacer clic en un d√≠a con un punto, debe aparecer una vista (modal o desplegable) que liste las actividades realizadas ese d√≠a (ej. "Ejercicio: Rutina de Pecho", "Tarea completada: Ensayo de Historia").
2.	Buscador Global üîç:
o	A√±ade una barra de b√∫squeda que permita encontrar cualquier nota, tarea, ejercicio o recurso por palabra clave en toda la aplicaci√≥n.
3. Persistencia de Datos Avanzada (Exportar/Importar con .zip) üìÇ:
‚Ä¢	Guardado Local: Toda la informaci√≥n generada en la aplicaci√≥n (rutinas, notas, tareas, dibujos, etc.) debe persistir autom√°ticamente en el localStorage del navegador.
‚Ä¢	Funci√≥n de Exportaci√≥n: Se debe implementar un bot√≥n de "Exportar Datos". Al presionarlo, la aplicaci√≥n deber√°:
1.	Recopilar toda la informaci√≥n del localStorage.
2.	Convertir estos datos en un √∫nico archivo de texto con formato JSON.
3.	Empaquetar este archivo JSON dentro de un archivo .zip.
4.	Iniciar la descarga de este archivo .zip en el dispositivo del usuario. (Esto asegura que en el futuro se puedan incluir otros archivos, como las im√°genes de la secci√≥n de dibujo, dentro del mismo paquete).
‚Ä¢	Funci√≥n de Importaci√≥n: Se debe implementar un bot√≥n de "Importar Datos" que permita al usuario seleccionar un archivo .zip desde su dispositivo. Al cargarlo, la aplicaci√≥n deber√°:
1.	Descomprimir el archivo y leer el JSON contenido en √©l.
2.	Presentar al usuario dos opciones claras: "Sobrescribir" (borrar todos los datos actuales y reemplazarlos con los del archivo) o "Fusionar" (a√±adir los datos importados a los existentes, idealmente evitando duplicados).
